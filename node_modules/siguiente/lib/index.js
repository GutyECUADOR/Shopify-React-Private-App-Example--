function verify(method, callback) {
  if (typeof callback !== 'function') {
    throw new TypeError('Invalid callback "' + callback + '" for ' + method + '()');
  }
}

function async(subtasks, callback, tryCatch, callResults) {
  function fail(e, next) {
    if (e && tryCatch) {
      try {
        tryCatch(e, next, callResults);

        if (tryCatch.length < 2) {
          next();
        }
      } catch (e) {
        next(e || undefined);
      }
    } else {
      next(e || undefined);
    }
  }

  function next(err) {
    var task = subtasks.shift();

    if (!task || err) {
      return callback(err, callResults);
    }

    setTimeout(function() {
      try {
        task(function(err) {
          fail(err, next);
        }, callResults);
      } catch (e) {
        fail(e, next);
      }
    });
  }

  next();
}

function catchable(ctx, callback) {
  verify('catch', callback);
  ctx.fail = callback;
}

function thenable(ctx, callback) {
  verify('then', callback);
  ctx.tasks.push(callback);
}

function runnable(ctx, callback) {
  if (callback) {
    verify('run', callback);
    ctx.end = callback;
  }

  var done;

  async(ctx.tasks, function() {
    if (!done) {
      done = true;

      if (ctx.end) {
        ctx.end.apply(ctx.bound, arguments);
      }
    }
  }, ctx.fail, ctx.bound);
}

function bindable(ctx, callback) {
  return function(run) {
    callback(ctx, run);
    return this;
  };
}

function wrapper(ctx) {
  return {
    catch: bindable(ctx, catchable),
    then: bindable(ctx, thenable),
    run: bindable(ctx, runnable)
  };
}

module.exports = function(context) {
  return wrapper({
    tasks: [],
    bound: context
  });
};
