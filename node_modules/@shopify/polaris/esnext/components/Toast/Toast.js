import * as React from 'react';
import { createUniqueIDFactory } from '@shopify/javascript-utilities/other';
import { Toast as AppBridgeToast } from '@shopify/app-bridge/actions';
import { DEFAULT_TOAST_DURATION, frameContextTypes, } from '../Frame';
import { withAppProvider } from '../AppProvider';
const createId = createUniqueIDFactory('Toast');
class Toast extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.id = createId();
    }
    componentDidMount() {
        const { context, id, props } = this;
        const { error, content, duration = DEFAULT_TOAST_DURATION, onDismiss, } = props;
        const { appBridge } = props.polaris;
        if (appBridge == null) {
            context.frame.showToast(Object.assign({ id }, props));
        }
        else {
            // eslint-disable-next-line no-console
            console.warn('Deprecation: Using `Toast` in an embedded app is deprecated and will be removed in v5.0. Use `Toast` from `@shopify/app-bridge-react` instead: https://help.shopify.com/en/api/embedded-apps/app-bridge/react-components/toast');
            this.appBridgeToast = AppBridgeToast.create(appBridge, {
                message: content,
                duration,
                isError: error,
            });
            this.appBridgeToast.subscribe(AppBridgeToast.Action.CLEAR, onDismiss);
            this.appBridgeToast.dispatch(AppBridgeToast.Action.SHOW);
        }
    }
    componentWillUnmount() {
        const { appBridge } = this.props.polaris;
        if (appBridge == null) {
            this.context.frame.hideToast({ id: this.id });
        }
        else if (this.appBridgeToast != null) {
            this.appBridgeToast.unsubscribe();
        }
    }
    render() {
        return null;
    }
}
Toast.contextTypes = frameContextTypes;
export default withAppProvider()(Toast);
