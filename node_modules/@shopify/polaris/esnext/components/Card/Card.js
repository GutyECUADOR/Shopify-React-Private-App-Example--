import * as React from 'react';
import { classNames } from '@shopify/css-utilities';
import { contentContextTypes, } from '../../types';
import ActionList from '../ActionList';
import Button, { buttonFrom } from '../Button';
import ButtonGroup from '../ButtonGroup';
import Popover from '../Popover';
import { withAppProvider } from '../AppProvider';
import { Header, Section, Subsection } from './components';
import styles from './Card.scss';
class Card extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            secondaryFooterActionsPopoverOpen: false,
        };
        this.toggleSecondaryActionsPopover = () => {
            this.setState(({ secondaryFooterActionsPopoverOpen }) => {
                return {
                    secondaryFooterActionsPopoverOpen: !secondaryFooterActionsPopoverOpen,
                };
            });
        };
    }
    getChildContext() {
        return {
            withinContentContainer: true,
        };
    }
    render() {
        const { children, title, subdued, sectioned, actions, primaryFooterAction, secondaryFooterAction, secondaryFooterActions, secondaryFooterActionsDisclosureText, polaris: { intl }, } = this.props;
        const className = classNames(styles.Card, subdued && styles.subdued);
        const headerMarkup = title || actions ? <Header actions={actions} title={title}/> : null;
        const content = sectioned ? <Section>{children}</Section> : children;
        const primaryFooterActionMarkup = primaryFooterAction
            ? buttonFrom(primaryFooterAction, { primary: true })
            : null;
        if (secondaryFooterAction) {
            // eslint-disable-next-line no-console
            console.warn('Deprecation: The secondaryFooterAction prop on Card has been deprecated. Pass an array of secondary actions to the secondaryFooterActions prop instead.');
        }
        const secondaryFooterActionMarkup = secondaryFooterAction
            ? buttonFrom(secondaryFooterAction)
            : null;
        let secondaryFooterActionsMarkup = null;
        if (secondaryFooterActions && secondaryFooterActions.length) {
            if (secondaryFooterActions.length === 1) {
                secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]);
            }
            else {
                secondaryFooterActionsMarkup = (<React.Fragment>
            <Popover active={this.state.secondaryFooterActionsPopoverOpen} activator={<Button disclosure onClick={this.toggleSecondaryActionsPopover}>
                  {secondaryFooterActionsDisclosureText ||
                    intl.translate('Polaris.Common.more')}
                </Button>} onClose={this.toggleSecondaryActionsPopover}>
              <ActionList items={secondaryFooterActions}/>
            </Popover>
          </React.Fragment>);
            }
        }
        const footerMarkup = primaryFooterActionMarkup ||
            secondaryFooterActionMarkup ||
            secondaryFooterActionsMarkup ? (<div className={styles.Footer}>
          <ButtonGroup>
            {secondaryFooterActionsMarkup || secondaryFooterActionMarkup}
            {primaryFooterActionMarkup}
          </ButtonGroup>
        </div>) : null;
        return (<div className={className}>
        {headerMarkup}
        {content}
        {footerMarkup}
      </div>);
    }
}
Card.Section = Section;
Card.Header = Header;
Card.Subsection = Subsection;
Card.childContextTypes = contentContextTypes;
export default withAppProvider()(Card);
